<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- 指定POM模型的版本 -->
    <modelVersion>4.0.0</modelVersion>
    <!-- 定义项目组的ID，通常是公司或组织的唯一标识符 -->
    <groupId>com.xht</groupId>
    <!-- 定义项目的唯一ID，通常是项目的名称 -->
    <artifactId>xht-platform</artifactId>
    <!-- 定义项目的版本号，这里使用了一个变量${revision} -->
    <version>${revision}</version>
    <!-- 定义项目的打包方式，这里设置为pom，表示这是一个父项目或聚合项目 -->
    <packaging>pom</packaging>
    <!-- 定义项目的名称，用于展示 -->
    <name>xht-platform</name>
    <!-- 提供项目的描述信息 -->
    <description>xht-platform</description>


    <!-- 定义项目模块 -->
    <modules>
        <module>xht-framework</module>
        <module>xht-demo</module>
        <module>xht-modules</module>
        <module>xht-auth</module>
        <module>xht-gateway</module>
        <module>xht-api</module>
    </modules>

    <!-- 定义项目属性 -->
    <properties>
        <revision>${xht.version}</revision>
        <xht.version>1.0.0</xht.version>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <flatten-maven-plugin.version>1.6.0</flatten-maven-plugin.version>
        <docker-maven-plugin.version>0.46.0</docker-maven-plugin.version>
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
        <spring-boot.version>3.4.4</spring-boot.version>
        <spring-cloud.version>2024.0.0</spring-cloud.version>
        <spring-cloud-alibaba.version>2023.0.3.2</spring-cloud-alibaba.version>
        <mybatis-plus.version>3.5.9</mybatis-plus.version>
        <mybatis-plus-jsqlparser.version>3.5.9</mybatis-plus-jsqlparser.version>
        <knife-springdoc.version>4.5.0</knife-springdoc.version>
        <knife-swagger.version>2.2.27</knife-swagger.version>
        <velocity.version>2.4</velocity.version>
        <fastjson2.version>2.0.53</fastjson2.version>
        <hutool.version>5.8.38</hutool.version>
        <lombok.version>1.18.36</lombok.version>
        <mapstruct.version>1.6.3</mapstruct.version>
        <lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
    </properties>

    <!-- 依赖管理，集中定义依赖版本 -->
    <dependencyManagement>
        <dependencies>
            <!-- SpringBoot 依赖配置 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- SpringCloud 微服务 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- SpringCloud Alibaba 微服务 -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- 通用模块依赖配置 -->
            <dependency>
                <groupId>com.xht</groupId>
                <artifactId>xht-framework-bom</artifactId>
                <version>${xht.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Mybatis-Plus 依赖配置 -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>

            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-jsqlparser</artifactId>
                <version>${mybatis-plus-jsqlparser.version}</version>
            </dependency>

            <!-- mapstruct 转换器 -->
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct</artifactId>
                <version>${mapstruct.version}</version>
            </dependency>

            <!-- Swagger-Knife4j -->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>
                <version>${knife-springdoc.version}</version>
            </dependency>

            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-gateway-spring-boot-starter</artifactId>
                <version>${knife-springdoc.version}</version>
            </dependency>

            <dependency>
                <groupId>io.swagger.core.v3</groupId>
                <artifactId>swagger-annotations-jakarta</artifactId>
                <version>${knife-swagger.version}</version>
                <scope>compile</scope>
            </dependency>

            <!-- 代码生成使用模板 -->
            <dependency>
                <groupId>org.apache.velocity</groupId>
                <artifactId>velocity-engine-core</artifactId>
                <version>${velocity.version}</version>
            </dependency>

            <!-- JSON 解析器和生成器 -->
            <dependency>
                <groupId>com.alibaba.fastjson2</groupId>
                <artifactId>fastjson2</artifactId>
                <version>${fastjson2.version}</version>
            </dependency>

            <!-- huTool 工具类库 -->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-bom</artifactId>
                <version>${hutool.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- 项目具体依赖 -->
    <dependencies>
        <!-- bootstrap 启动器 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
    </dependencies>

    <!-- 构建配置 -->
    <build>
        <resources>
            <!-- 资源文件配置，启用过滤功能以替换属性值 -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <pluginManagement>
            <plugins>
                <!-- Spring Boot Maven 插件 -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <configuration>
                        <finalName>${project.build.finalName}</finalName>
                        <layers>
                            <enabled>true</enabled>
                        </layers>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!-- 统一版本 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>${flatten-maven-plugin.version}</version>
                <configuration>
                    <flattenMode>resolveCiFriendliesOnly</flattenMode>
                    <updatePomFile>true</updatePomFile>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Maven 编译插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <parameters>true</parameters>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>${lombok-mapstruct-binding.version}</version>
                        </path>
                    </annotationProcessorPaths>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <!-- 跳过 Spring Boot Maven 插件的默认行为 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <!-- Docker Maven 插件，配置为跳过 -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker-maven-plugin.version}</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <!--定义不同的构建配置文件-->
    <profiles>
        <!--开发环境-->
        <profile>
            <id>dev</id>
            <properties>
                <profiles.active>dev</profiles.active>
                <log.file.path>D:\xht-logs</log.file.path>
                <!-- nacos相关配置 -->
                <nacos.username>nacos</nacos.username>
                <nacos.password>nacos</nacos.password>
                <nacos.discovery.address>127.0.0.1:8848</nacos.discovery.address>
                <nacos.config.address>127.0.0.1:8848</nacos.config.address>
                <nacos.namespace>xht-dev</nacos.namespace>
                <nacos.group>XHT_CLOUD_GROUP</nacos.group>
                <nacos.version>v3</nacos.version>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <!--测试环境-->
        <profile>
            <id>test</id>
            <properties>
                <profiles.active>test</profiles.active>
                <log.file.path>/home/xht-logs</log.file.path>
                <!-- nacos相关配置 -->
                <nacos.username>nacos</nacos.username>
                <nacos.password>nacos</nacos.password>
                <nacos.discovery.address>127.0.0.1:8848</nacos.discovery.address>
                <nacos.config.address>127.0.0.1:8848</nacos.config.address>
                <nacos.namespace>xht-test</nacos.namespace>
                <nacos.group>XHT_CLOUD_GROUP</nacos.group>
                <nacos.version>v3</nacos.version>
            </properties>
        </profile>
        <!--生产环境-->
        <profile>
            <id>prod</id>
            <properties>
                <profiles.active>prod</profiles.active>
                <log.file.path>/home/xht-logs</log.file.path>
                <!-- nacos相关配置 -->
                <nacos.username>nacos</nacos.username>
                <nacos.password>nacos</nacos.password>
                <nacos.discovery.address>127.0.0.1:8848</nacos.discovery.address>
                <nacos.config.address>127.0.0.1:8848</nacos.config.address>
                <nacos.namespace>xht-prod</nacos.namespace>
                <nacos.group>XHT_CLOUD_GROUP</nacos.group>
                <nacos.version>v3</nacos.version>
            </properties>
        </profile>
    </profiles>
</project>
